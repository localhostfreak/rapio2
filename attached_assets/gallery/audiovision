import { defineType, defineField } from "sanity";

export const audioMessageSchema = defineType({
  name: "audioMessage",
  title: "Audio Message",
  type: "document",
  fields: [
    defineField({ name: "title", title: "Title", type: "string", validation: (Rule) => Rule.required() }),
    defineField({
      name: "audioFile",
      title: "Audio File",
      type: "file",
      options: { accept: "audio/*" },
      validation: (Rule) => Rule.required()
    }),
    defineField({ name: "caption", title: "Caption", type: "string" }),
    defineField({ name: "description", title: "Description", type: "text" }),
    defineField({
      name: "mood",
      title: "Mood",
      type: "string",
      options: { list: ["romantic", "happy", "reflective", "playful", "missingYou"].map(v => ({ title: v, value: v })) }
    }),
    defineField({ name: "duration", title: "Duration (seconds)", type: "number" }),
    defineField({ name: "isPrivate", title: "Private Message", type: "boolean", initialValue: false }),
    defineField({
      name: "backgroundMusic",
      title: "Background Music",
      type: "file",
      options: { accept: "audio/*" }
    }),
    defineField({
      name: "ambientSound",
      title: "Ambient Sound Layer",
      type: "object",
      fields: [
        { name: "soundFile", type: "file", title: "Sound File", options: { accept: "audio/*" } },
        { name: "volume", type: "number", title: "Volume (0-1)", initialValue: 0.3, validation: (Rule) => Rule.min(0).max(1) },
        { name: "loop", type: "boolean", title: "Loop", initialValue: true }
      ]
    }),
    defineField({
      name: "visualizer",
      title: "Audio Visualizer Style",
      type: "string",
      options: { list: ["wave", "bars", "circle", "heart", "none"].map(v => ({ title: v, value: v })) },
      initialValue: "wave"
    }),
    defineField({ name: "scheduledFor", title: "Scheduled Delivery", type: "datetime" }),
    defineField({
      name: "autoTranscript",
      title: "AI-Generated Transcript",
      type: "object",
      fields: [
        { name: "text", type: "text", title: "Transcript" },
        { name: "language", type: "string", title: "Detected Language" },
        { name: "confidence", type: "number", title: "Confidence Score (0-1)" }
      ]
    }),
    defineField({
      name: "reactions",
      title: "Reactions",
      type: "array",
      of: [
        {
          type: "object",
          fields: [
            { name: "emoji", type: "string", title: "Emoji" },
            { name: "count", type: "number", title: "Count", initialValue: 0 },
            { name: "evolvesTo", type: "string", title: "Evolves To" },
            { name: "evolutionThreshold", type: "number", title: "Evolution Threshold", initialValue: 5 }
          ]
        }
      ]
    }),
    defineField({
      name: "background",
      title: "Message Background",
      type: "object",
      fields: [
        { name: "color", type: "string", title: "Color" },
        { name: "imageUrl", type: "url", title: "Image URL" },
        { name: "style", type: "string", title: "Style" }
      ]
    }),
    defineField({
      name: "location",
      title: "Recording Location",
      type: "geopoint"
    }),
    defineField({
      name: "unlockLocation",
      title: "Unlock Location",
      type: "geopoint"
    }),
    defineField({
      name: "weatherTrigger",
      title: "Weather Trigger",
      type: "string",
      options: { list: ["sunny", "rainy", "snowy", "cloudy", "any"].map(v => ({ title: v, value: v })) }
    }),
    defineField({
      name: "voiceClone",
      title: "AI Voice Clone",
      type: "object",
      fields: [
        { name: "enabled", type: "boolean", title: "Enable Voice Cloning", initialValue: false },
        { name: "modelId", type: "string", title: "Voice Model ID" },
        { name: "textToSpeech", type: "text", title: "Text to Synthesize" }
      ]
    })
  ],
  preview: {
    select: {
      title: "title",
      subtitle: "description",
      mood: "mood"
    },
    prepare({ title, subtitle, mood }) {
      return {
        title,
        subtitle: `${subtitle || "No description"} ${mood ? `(${mood})` : ""}`
      };
    }
  }
});